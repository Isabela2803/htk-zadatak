/* 
1. za≈°to hvatamo element po ID-u, ako treba dodat klasu u css-u i onda po njoj selektirat element/ hvatat ga
2. koristit nestanje u scss-u
npr .load-more-btn {
    &:active{...}
    &:focus{...}
}

3. zasto koristimo ode root i znamo li sta je to? (ode je nepotreban)
4. koristi se rooz za css property (slicno kao scss varijabla), prebaciti --surface-color i --curve u novo kreirani _abstracts.scss 
i po mogucnosti dat im malo deskriptivnije ime

*/

#cards-wrapper {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    width: 100%;
}

:root {
    --curve: 40;
}

.cards {
    display: grid; // oke je koristi grid ako ga znamo koristit, bolje se drzat flexa ako nismo sigurno kako grid radi :D
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 4rem 5vw; // ajajajaja rem i vw skupa
    padding: 0;
    list-style-type: none;
}

.cards-section {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.card {
    position: relative;
    display: block;
    height: auto;
    width: 100%;
    margin: 10px;
    overflow: hidden;
    text-decoration: none;
    border-radius: calc(var(--curve) * 1px);
    @include tablet-width {
        width: 40%;
    }
    @include desktop-width {
        height: 100%;
        width: 20%;
    }
    &:hover .card-header {
        transform: translateY(0);
    }
    &:hover .card-overlay {
        transform: translateY(0);
    }
    &-image {
        width: 100%;
        height: auto;
        object-fit: cover;
        object-position: center;
        @include tablet-width {
            height: 300px;
        }
    }
    &-overlay {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 1;
        border-radius: calc(var(--curve) * 1px);
        background-color: $color-white;
        transform: translateY(100%);
        transition: .2s ease-in-out;
    }
    &-header {
        position: relative;
        display: flex;
        align-items: center;
        padding: 1.2em;
        border-radius: calc(var(--curve) * 1px) 0 0 0;
        background-color: $color-white;
        transform: translateY(-100%);
        transition: .2s ease-in-out;
    }
    &-title {
        font-size: 1em;
        margin: 0 0 .3em;
        color: $color-cards-title-name;
    }
    &-age,
    &-color {
        font-size: .8em;
        color: $color-cards-text;
        margin-bottom: 5%;
    }
    &-btn {
        background-color: $color-red--light;
        border: none;
        color: $color-white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        width: 100%;
        cursor: pointer;
    }
}

// @media only screen and (max-width: 1024px) and (min-width: 414px) {
//     button {
//         min-width: 120px;
//         padding: 0 25px;
//     }
//     button {
//         margin: 5px 15px;
//     }
//     .bg-modal {
//         p {
//             font-size: 20px;
//         }
//     }
//     .modal-image {
//         height: 300px;
//         width: 300px;
//     }
//     #cards-wrapper {
//         width: 100%;
//     }
//     .card {
//         height: 50%;
//         width: 50%;
//     }
//     .card-image {
//         width: 400px;
//         height: 300px;
//     }
// }
// @media (max-width:1024px) {
//     .card-image {
//         width: 100%;
//         object-fit: cover;
//     }
// }